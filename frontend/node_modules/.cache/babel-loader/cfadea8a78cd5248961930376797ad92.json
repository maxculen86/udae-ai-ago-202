{"ast":null,"code":"import urlWebServices from './webServices.js';\nexport const loginGrupos = async function (login, signal) {\n  //url webservices\n  let url = urlWebServices.loginGrupo; //armo json con datos\n\n  const formData = new URLSearchParams();\n  formData.append('email', login.email);\n  formData.append('password', login.password); //alert(login.email);\n  //console.log(\"url\",url);\n\n  try {\n    let response = await fetch(url, {\n      method: 'POST',\n      // or 'PUT'\n      mode: \"cors\",\n      headers: {\n        'Accept': 'application/x-www-form-urlencoded',\n        // 'x-access-token': WebToken.webToken,\n        'Origin': 'http://localhost:3000',\n        'Content-Type': 'application/x-www-form-urlencoded'\n      },\n      body: formData,\n      signal: signal\n    });\n    alert(response.status);\n    let rdo = response.status;\n    alert(rdo.toString);\n    let data = await response.json();\n    console.log(\"jsonresponse\", data);\n\n    switch (rdo) {\n      case 201:\n        {\n          //guardo token\n          localStorage.setItem(\"x\", data.token.token); //guardo usuario logueado\n\n          let user = data.token.user;\n          localStorage.setItem(\"nombre\", user.name);\n          localStorage.setItem(\"email\", user.email);\n          return {\n            rdo: 0,\n            mensaje: \"Ok\"\n          }; //correcto\n        }\n\n      case 202:\n        {\n          //error mail\n          return {\n            rdo: 1,\n            mensaje: \"El mail ingresado no existe en nuestra base.\"\n          };\n        }\n\n      case 203:\n        {\n          //error password\n          return {\n            rdo: 1,\n            mensaje: \"La contraseña no es correcta.\"\n          };\n        }\n\n      default:\n        {\n          //otro error\n          return {\n            rdo: 1,\n            mensaje: \"Ha ocurrido un error\"\n          };\n        }\n    }\n  } catch (error) {\n    console.log(\"error\", error);\n  }\n\n  ;\n};","map":{"version":3,"sources":["/Users/CulenSound/git/api-ago-2020/client/src/controller/apiMed.controller.js"],"names":["urlWebServices","loginGrupos","login","signal","url","loginGrupo","formData","URLSearchParams","append","email","password","response","fetch","method","mode","headers","body","alert","status","rdo","toString","data","json","console","log","localStorage","setItem","token","user","name","mensaje","error"],"mappings":"AAAA,OAAOA,cAAP,MAA2B,kBAA3B;AAEA,OAAO,MAAMC,WAAW,GAAE,gBAAeC,KAAf,EAAqBC,MAArB,EAC1B;AACI;AACA,MAAIC,GAAG,GAAGJ,cAAc,CAACK,UAAzB,CAFJ,CAGI;;AACA,QAAMC,QAAQ,GAAG,IAAIC,eAAJ,EAAjB;AACAD,EAAAA,QAAQ,CAACE,MAAT,CAAgB,OAAhB,EAAyBN,KAAK,CAACO,KAA/B;AACAH,EAAAA,QAAQ,CAACE,MAAT,CAAgB,UAAhB,EAA4BN,KAAK,CAACQ,QAAlC,EANJ,CAOI;AACA;;AACA,MACA;AACI,QAAIC,QAAQ,GAAG,MAAMC,KAAK,CAACR,GAAD,EAAK;AAC3BS,MAAAA,MAAM,EAAE,MADmB;AACX;AAChBC,MAAAA,IAAI,EAAE,MAFqB;AAG3BC,MAAAA,OAAO,EAAC;AACJ,kBAAS,mCADL;AAEL;AACC,kBAAS,uBAHL;AAIJ,wBAAgB;AAJZ,OAHmB;AAQ3BC,MAAAA,IAAI,EAAEV,QARqB;AAS3BH,MAAAA,MAAM,EAAEA;AATmB,KAAL,CAA1B;AAWAc,IAAAA,KAAK,CAACN,QAAQ,CAACO,MAAV,CAAL;AACA,QAAIC,GAAG,GAAGR,QAAQ,CAACO,MAAnB;AACAD,IAAAA,KAAK,CAACE,GAAG,CAACC,QAAL,CAAL;AACA,QAAIC,IAAI,GAAG,MAAMV,QAAQ,CAACW,IAAT,EAAjB;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA2BH,IAA3B;;AACI,YAAOF,GAAP;AAEI,WAAK,GAAL;AACA;AACI;AACAM,UAAAA,YAAY,CAACC,OAAb,CAAqB,GAArB,EAAyBL,IAAI,CAACM,KAAL,CAAWA,KAApC,EAFJ,CAGI;;AACA,cAAIC,IAAI,GAAGP,IAAI,CAACM,KAAL,CAAWC,IAAtB;AACAH,UAAAA,YAAY,CAACC,OAAb,CAAqB,QAArB,EAA8BE,IAAI,CAACC,IAAnC;AACAJ,UAAAA,YAAY,CAACC,OAAb,CAAqB,OAArB,EAA6BE,IAAI,CAACnB,KAAlC;AAEA,iBAAQ;AAACU,YAAAA,GAAG,EAAC,CAAL;AAAOW,YAAAA,OAAO,EAAC;AAAf,WAAR,CARJ,CAQkC;AACjC;;AACD,WAAK,GAAL;AACA;AACI;AACA,iBAAQ;AAACX,YAAAA,GAAG,EAAC,CAAL;AAAOW,YAAAA,OAAO,EAAC;AAAf,WAAR;AACH;;AACD,WAAK,GAAL;AACA;AACI;AACA,iBAAQ;AAACX,YAAAA,GAAG,EAAC,CAAL;AAAOW,YAAAA,OAAO,EAAC;AAAf,WAAR;AACH;;AACD;AACA;AACI;AACA,iBAAQ;AAACX,YAAAA,GAAG,EAAC,CAAL;AAAOW,YAAAA,OAAO,EAAC;AAAf,WAAR;AACH;AA3BL;AA6BP,GA/CD,CAgDA,OAAMC,KAAN,EACA;AACIR,IAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAoBO,KAApB;AACH;;AAAA;AACJ,CA9DM","sourcesContent":["import urlWebServices from './webServices.js';\r\n\r\nexport const loginGrupos= async function(login,signal)\r\n{\r\n    //url webservices\r\n    let url = urlWebServices.loginGrupo;\r\n    //armo json con datos\r\n    const formData = new URLSearchParams();\r\n    formData.append('email', login.email);\r\n    formData.append('password', login.password);\r\n    //alert(login.email);\r\n    //console.log(\"url\",url);\r\n    try\r\n    {\r\n        let response = await fetch(url,{\r\n            method: 'POST', // or 'PUT'\r\n            mode: \"cors\",\r\n            headers:{\r\n                'Accept':'application/x-www-form-urlencoded',\r\n               // 'x-access-token': WebToken.webToken,\r\n                'Origin':'http://localhost:3000',\r\n                'Content-Type': 'application/x-www-form-urlencoded'},\r\n            body: formData,\r\n            signal: signal    \r\n        });\r\n        alert(response.status);\r\n        let rdo = response.status;\r\n        alert(rdo.toString);\r\n        let data = await response.json();\r\n        console.log(\"jsonresponse\",data);\r\n            switch(rdo)\r\n            {\r\n                case 201:\r\n                {\r\n                    //guardo token\r\n                    localStorage.setItem(\"x\",data.token.token);\r\n                    //guardo usuario logueado\r\n                    let user = data.token.user;\r\n                    localStorage.setItem(\"nombre\",user.name);\r\n                    localStorage.setItem(\"email\",user.email);\r\n                    \r\n                    return ({rdo:0,mensaje:\"Ok\"});//correcto\r\n                }\r\n                case 202:\r\n                {\r\n                    //error mail\r\n                    return ({rdo:1,mensaje:\"El mail ingresado no existe en nuestra base.\"});\r\n                }\r\n                case 203:\r\n                {\r\n                    //error password\r\n                    return ({rdo:1,mensaje:\"La contraseña no es correcta.\"});\r\n                }\r\n                default:\r\n                {\r\n                    //otro error\r\n                    return ({rdo:1,mensaje:\"Ha ocurrido un error\"});                \r\n                }\r\n            }\r\n    }\r\n    catch(error)\r\n    {\r\n        console.log(\"error\",error);\r\n    };\r\n}\r\n"]},"metadata":{},"sourceType":"module"}