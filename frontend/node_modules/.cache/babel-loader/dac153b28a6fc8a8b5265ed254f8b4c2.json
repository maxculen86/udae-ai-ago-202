{"ast":null,"code":"import urlWebServices from './webServices.js';\nexport const loginGrupos = async function (login, signal) {\n  //url webservices\n  let url = urlWebServices.loginGrupo; //armo json con datos\n\n  const formData = new URLSearchParams();\n  formData.append('email', login.email);\n  formData.append('password', login.password);\n  alert(formData);\n  console.log(\"url\", url);\n  console.log(\"datos\", login);\n\n  try {\n    let response = await fetch(url, {\n      method: 'POST',\n      // or 'PUT'\n      mode: \"cors\",\n      headers: {\n        'Accept': 'application/x-www-form-urlencoded',\n        // 'x-access-token': WebToken.webToken,\n        'Origin': 'http://localhost:3000',\n        'Content-Type': 'application/x-www-form-urlencoded'\n      },\n      body: formData,\n      signal: signal\n    });\n    let responseStatus = response.status;\n    let data = await response.json();\n    console.log(\"DATA\", data);\n\n    switch (responseStatus) {\n      case 201:\n        {\n          //guaresponseStatus token\n          localStorage.setItem(\"x\", data.logged.token); //guaresponseStatus usuario logueado\n\n          let user = data.logged.user;\n          console.log(\"User\", user);\n          localStorage.setItem(\"userNombre\", user.nombre);\n          localStorage.setItem(\"userNombre\", user.apellido);\n          localStorage.setItem(\"userEmail\", user.email);\n          localStorage.setItem(\"userProfile\", user.profile);\n          return {\n            responseStatus: 0,\n            mensaje: \"Ok\"\n          }; //correcto\n        }\n\n      case 202:\n        {\n          //error mail\n          return {\n            responseStatus: 1,\n            mensaje: \"El mail ingresado no existe en nuestra base.\"\n          };\n        }\n\n      case 203:\n        {\n          //error password\n          return {\n            responseStatus: 1,\n            mensaje: \"La contraseña no es correcta.\"\n          };\n        }\n\n      default:\n        {\n          //otro error\n          return {\n            responseStatus: 1,\n            mensaje: \"Ha ocurrido un error\"\n          };\n        }\n    }\n  } catch (error) {\n    console.log(\"error\", error);\n  }\n\n  ;\n};\nexport const registerGrupos = async function (register, signal) {\n  //url webservices\n  let url = urlWebServices.registerGrupo; //armo json con datos\n\n  const formData = new URLSearchParams();\n  formData.append('name', register.name);\n  formData.append('lname', register.lname);\n  formData.append('email', register.email);\n  formData.append('password', register.password);\n  alert(formData);\n  console.log(\"url\", url);\n  console.log(\"datos\", register);\n\n  try {\n    let response = await fetch(url, {\n      method: 'POST',\n      // or 'PUT'\n      mode: \"cors\",\n      headers: {\n        'Accept': 'application/x-www-form-urlencoded',\n        // 'x-access-token': WebToken.webToken,\n        'Origin': 'http://localhost:3000',\n        'Content-Type': 'application/x-www-form-urlencoded'\n      },\n      body: formData,\n      signal: signal\n    });\n    let responseStatus = response.status;\n    let data = await response.json();\n    console.log(\"DATA\", data);\n\n    switch (responseStatus) {\n      case 201:\n        {\n          //guaresponseStatus token\n          localStorage.setItem(\"x\", data.token); //guaresponseStatus usuario logueado\n          //let user = data.logged.user;\n          //console.log(\"User\", user);\n          //localStorage.setItem(\"userNombre\",formData.name);\n          // localStorage.setItem(\"userApellido\",formData.apellido);\n          // localStorage.setItem(\"userEmail\",formData.email);\n          // localStorage.setItem(\"userProfile\",user.profile);\n\n          return {\n            responseStatus: 0,\n            mensaje: \"Ok\"\n          }; //correcto\n        }\n\n      case 202:\n        {\n          //error mail\n          return {\n            responseStatus: 1,\n            mensaje: \"El mail ingresado no existe en nuestra base.\"\n          };\n        }\n\n      case 203:\n        {\n          //error password\n          return {\n            responseStatus: 1,\n            mensaje: \"La contraseña no es correcta.\"\n          };\n        }\n\n      default:\n        {\n          //otro error\n          return {\n            responseStatus: 1,\n            mensaje: \"Ha ocurrido un error\"\n          };\n        }\n    }\n  } catch (error) {\n    console.log(\"error\", error);\n  }\n\n  ;\n};\nexport const fetchUsers = async function (signal) {\n  //url webservices\n  let url = urlWebServices.usersWs;\n  console.log(\"url\", url);\n\n  try {\n    let response = await fetch(url, {\n      method: 'GET',\n      // or 'PUT'\n      mode: \"cors\",\n      headers: {\n        'Accept': 'application/x-www-form-urlencoded',\n        'x-access-token': localStorage.getItem(\"x\"),\n        'Origin': 'http://localhost:3000',\n        'Content-Type': 'application/x-www-form-urlencoded'\n      },\n      signal: signal\n    });\n    let responseStatus = response.status;\n    let responseJson = await response.json();\n\n    switch (responseStatus) {\n      case 200:\n        {\n          //guaresponseStatus token\n          //localStorage.setItem(\"x\",data.logged.token);\n          //guaresponseStatus usuario logueado\n          let userList = responseJson.data.docs; //let userGrid = localStorage.setItem(\"userNombre\",user.nombre);\n          // localStorage.setItem(\"userEmail\",user.email);\n          // localStorage.setItem(\"userProfile\",user.profile);\n\n          return {\n            data: userList,\n            responseStatus: 0,\n            mensaje: \"Ok\"\n          }; //correcto\n        }\n\n      case 202:\n        {\n          //error mail\n          return {\n            responseStatus: 1,\n            mensaje: \"El mail ingresado no existe en nuestra base.\"\n          };\n        }\n\n      case 203:\n        {\n          //error password\n          return {\n            responseStatus: 1,\n            mensaje: \"La contraseña no es correcta.\"\n          };\n        }\n\n      default:\n        {\n          //otro error\n          return {\n            responseStatus: 1,\n            mensaje: \"Ha ocurrido un error\"\n          };\n        }\n    }\n  } catch (error) {\n    console.log(\"error\", error);\n  }\n\n  ;\n};","map":{"version":3,"sources":["/Users/CulenSound/git/api-ago-2020/client/src/controller/apiMed.controller.js"],"names":["urlWebServices","loginGrupos","login","signal","url","loginGrupo","formData","URLSearchParams","append","email","password","alert","console","log","response","fetch","method","mode","headers","body","responseStatus","status","data","json","localStorage","setItem","logged","token","user","nombre","apellido","profile","mensaje","error","registerGrupos","register","registerGrupo","name","lname","fetchUsers","usersWs","getItem","responseJson","userList","docs"],"mappings":"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","sourcesContent":["import urlWebServices from './webServices.js';\r\n\r\nexport const loginGrupos= async function(login,signal)\r\n{\r\n    //url webservices\r\n    let url = urlWebServices.loginGrupo;\r\n    //armo json con datos\r\n    const formData = new URLSearchParams();\r\n    formData.append('email', login.email);\r\n    formData.append('password', login.password);\r\n    alert(formData);\r\n    console.log(\"url\",url);\r\n    console.log(\"datos\",login);\r\n\r\n    try\r\n    {\r\n        let response = await fetch(url,{\r\n            method: 'POST', // or 'PUT'\r\n            mode: \"cors\",\r\n            headers:{\r\n                'Accept':'application/x-www-form-urlencoded',\r\n               // 'x-access-token': WebToken.webToken,\r\n                'Origin':'http://localhost:3000',\r\n                'Content-Type': 'application/x-www-form-urlencoded'},\r\n            body: formData,\r\n            signal: signal    \r\n        });\r\n\r\n        let responseStatus = response.status;\r\n        let data = await response.json();\r\n        console.log(\"DATA\",data);\r\n            switch(responseStatus)\r\n            {\r\n                case 201:\r\n                {\r\n                    //guaresponseStatus token\r\n                    localStorage.setItem(\"x\",data.logged.token);\r\n                    //guaresponseStatus usuario logueado\r\n                    let user = data.logged.user;\r\n                    console.log(\"User\", user);\r\n                    localStorage.setItem(\"userNombre\",user.nombre);\r\n                    localStorage.setItem(\"userNombre\",user.apellido);\r\n                    localStorage.setItem(\"userEmail\",user.email);\r\n                    localStorage.setItem(\"userProfile\",user.profile);\r\n                    return ({responseStatus:0,mensaje:\"Ok\"});//correcto\r\n                }\r\n                case 202:\r\n                {\r\n                    //error mail\r\n                    return ({responseStatus:1,mensaje:\"El mail ingresado no existe en nuestra base.\"});\r\n                }\r\n                case 203:\r\n                {\r\n                    //error password\r\n                    return ({responseStatus:1,mensaje:\"La contraseña no es correcta.\"});\r\n                }\r\n                default:\r\n                {\r\n                    //otro error\r\n                    return ({responseStatus:1,mensaje:\"Ha ocurrido un error\"});                \r\n                }\r\n            }\r\n    }\r\n    catch(error)\r\n    {\r\n        console.log(\"error\",error);\r\n    };\r\n}\r\n\r\nexport const registerGrupos= async function(register,signal)\r\n{\r\n    //url webservices\r\n    let url = urlWebServices.registerGrupo;\r\n    //armo json con datos\r\n    const formData = new URLSearchParams();\r\n    formData.append('name', register.name);\r\n    formData.append('lname', register.lname);\r\n    formData.append('email', register.email);\r\n    formData.append('password', register.password);\r\n    alert(formData);\r\n    console.log(\"url\",url);\r\n    console.log(\"datos\",register);\r\n\r\n    try\r\n    {\r\n        let response = await fetch(url,{\r\n            method: 'POST', // or 'PUT'\r\n            mode: \"cors\",\r\n            headers:{\r\n                'Accept':'application/x-www-form-urlencoded',\r\n               // 'x-access-token': WebToken.webToken,\r\n                'Origin':'http://localhost:3000',\r\n                'Content-Type': 'application/x-www-form-urlencoded'},\r\n            body: formData,\r\n            signal: signal    \r\n        });\r\n\r\n        let responseStatus = response.status;\r\n        let data = await response.json();\r\n        console.log(\"DATA\",data);\r\n            switch(responseStatus)\r\n            {\r\n                case 201:\r\n                {\r\n                    //guaresponseStatus token\r\n                    localStorage.setItem(\"x\",data.token);\r\n                    //guaresponseStatus usuario logueado\r\n                    //let user = data.logged.user;\r\n                    //console.log(\"User\", user);\r\n                    //localStorage.setItem(\"userNombre\",formData.name);\r\n                    // localStorage.setItem(\"userApellido\",formData.apellido);\r\n                    // localStorage.setItem(\"userEmail\",formData.email);\r\n                    // localStorage.setItem(\"userProfile\",user.profile);\r\n                    return ({responseStatus:0,mensaje:\"Ok\"});//correcto\r\n                }\r\n                case 202:\r\n                {\r\n                    //error mail\r\n                    return ({responseStatus:1,mensaje:\"El mail ingresado no existe en nuestra base.\"});\r\n                }\r\n                case 203:\r\n                {\r\n                    //error password\r\n                    return ({responseStatus:1,mensaje:\"La contraseña no es correcta.\"});\r\n                }\r\n                default:\r\n                {\r\n                    //otro error\r\n                    return ({responseStatus:1,mensaje:\"Ha ocurrido un error\"});                \r\n                }\r\n            }\r\n    }\r\n    catch(error)\r\n    {\r\n        console.log(\"error\",error);\r\n    };\r\n}\r\n\r\nexport const fetchUsers= async function(signal)\r\n{\r\n    //url webservices\r\n    let url = urlWebServices.usersWs;\r\n    \r\n    console.log(\"url\",url);\r\n\r\n    try\r\n    {\r\n        let response = await fetch(url,{\r\n            method: 'GET', // or 'PUT'\r\n            mode: \"cors\",\r\n            headers:{\r\n                'Accept':'application/x-www-form-urlencoded',\r\n               'x-access-token': localStorage.getItem(\"x\"),\r\n                'Origin':'http://localhost:3000',\r\n                'Content-Type': 'application/x-www-form-urlencoded'},\r\n            signal: signal    \r\n        });\r\n\r\n        let responseStatus = response.status;\r\n        let responseJson = await response.json();\r\n            switch(responseStatus)\r\n            {\r\n                case 200:\r\n                {\r\n                    //guaresponseStatus token\r\n                    //localStorage.setItem(\"x\",data.logged.token);\r\n                    //guaresponseStatus usuario logueado\r\n                    let userList = responseJson.data.docs;\r\n                    //let userGrid = localStorage.setItem(\"userNombre\",user.nombre);\r\n                    // localStorage.setItem(\"userEmail\",user.email);\r\n                    // localStorage.setItem(\"userProfile\",user.profile);\r\n                    return ({data:userList, responseStatus:0,mensaje:\"Ok\"});//correcto\r\n                }\r\n                case 202:\r\n                {\r\n                    //error mail\r\n                    return ({responseStatus:1,mensaje:\"El mail ingresado no existe en nuestra base.\"});\r\n                }\r\n                case 203:\r\n                {\r\n                    //error password\r\n                    return ({responseStatus:1,mensaje:\"La contraseña no es correcta.\"});\r\n                }\r\n                default:\r\n                {\r\n                    //otro error\r\n                    return ({responseStatus:1,mensaje:\"Ha ocurrido un error\"});                \r\n                }\r\n            }\r\n    }\r\n    catch(error)\r\n    {\r\n        console.log(\"error\",error);\r\n    };\r\n}"]},"metadata":{},"sourceType":"module"}